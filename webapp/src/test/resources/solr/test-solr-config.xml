<?xml version="1.0" encoding="UTF-8" ?>
<!--
  For more details about configurations options that may appear in this
  file, see http://wiki.apache.org/solr/SolrConfigXml.

  Specifically, the Solr Config can support XInclude, which may make it easier to manage
  the configuration.  See https://issues.apache.org/jira/browse/SOLR-1167
-->
<config>
  <!--
      Set this to 'false' if you want solr to continue working after it has 
    encountered an severe configuration error.  In a production environment, 
    you may want solr to keep working even if one handler is mis-configured.

    You may also set this to false using by setting the system property:
    -Dsolr.abortOnConfigurationError=false
  -->
  <abortOnConfigurationError>true</abortOnConfigurationError>

  <!--
    lib directives can be used to instruct Solr to load an Jars identified
    and use them to resolve any "plugins" specified in your solrconfig.xml or
    schema.xml (ie: Analyzers, Request Handlers, etc...).

    All directories and paths are resolved relative the instanceDir.

    If a "./lib" directory exists in your instanceDir, all files found in it
    are included as if you had used the following syntax...

    <lib dir="./lib" />
    -->

  <!-- 
    Used to specify an alternate directory to hold all index data
    other than the default ./data under the Solr home.
    If replication is in use, this should match the replication configuration. 
  -->
  <dataDir>${solr.data.dir:./solr/data}</dataDir>


  <!-- 
    WARNING: this <indexDefaults> section only provides defaults for index writers
    in general. See also the <mainIndex> section after that when changing parameters
    for Solr's main Lucene index. 
  -->
  <indexDefaults>
    <!-- Values here affect all index writers and act as a default unless overridden. -->
    <useCompoundFile>false</useCompoundFile>

    <mergeFactor>10</mergeFactor>
    <!-- 
      If both ramBufferSizeMB and maxBufferedDocs is set, then Lucene will flush
      based on whichever limit is hit first.  
    -->
    <!--<maxBufferedDocs>1000</maxBufferedDocs>-->

    <!-- 
      Sets the amount of RAM that may be used by Lucene indexing
      for buffering added documents and deletions before they are
      flushed to the Directory.  
    -->
    <ramBufferSizeMB>64</ramBufferSizeMB>
    <!-- <maxMergeDocs>2147483647</maxMergeDocs> -->
    <maxFieldLength>10000</maxFieldLength>
    <writeLockTimeout>1000</writeLockTimeout>
    <commitLockTimeout>10000</commitLockTimeout>

    <!--
      Expert: The Merge Policy in Lucene controls how merging is handled by
      Lucene.  The default in 2.3 is the LogByteSizeMergePolicy, previous
      versions used LogDocMergePolicy.

      LogByteSizeMergePolicy chooses segments to merge based on their size.  The
      Lucene 2.2 default, LogDocMergePolicy chose when to merge based on number
      of documents

      Other implementations of MergePolicy must have a no-argument constructor
    -->
    <!--<mergePolicy class="org.apache.lucene.index.LogByteSizeMergePolicy"/>-->

    <!--
      Expert:
      The Merge Scheduler in Lucene controls how merges are performed.  The
      ConcurrentMergeScheduler (Lucene 2.3 default) can perform merges in the
      background using separate threads.  The SerialMergeScheduler (Lucene 2.2
      default) does not.
    -->
    <!--<mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>-->


    <!--
      This option specifies which Lucene LockFactory implementation to use.

      single = SingleInstanceLockFactory - suggested for a read-only index
      or when there is no possibility of another process trying
      to modify the index.
      native = NativeFSLockFactory  - uses OS native file locking
      simple = SimpleFSLockFactory  - uses a plain file for locking

      (For backwards compatibility with Solr 1.2, 'simple' is the default
      if not specified.)
    -->
    <lockType>native</lockType>
    <!--
      Expert:
      Controls how often Lucene loads terms into memory 
    -->
    <!--<termIndexInterval>256</termIndexInterval>-->
  </indexDefaults>

  <mainIndex>
    <!-- options specific to the main on-disk lucene index -->
    <useCompoundFile>false</useCompoundFile>
    <ramBufferSizeMB>64</ramBufferSizeMB>
    <mergeFactor>10</mergeFactor>

    <!-- inherit from indexDefaults <maxFieldLength>10000</maxFieldLength> -->

    <!-- 
      If true, unlock any held write or commit locks on startup. 
      This defeats the locking mechanism that allows multiple
      processes to safely access a lucene index, and should be
      used with care.
      This is not needed if lock type is 'none' or 'single'
    -->
    <unlockOnStartup>false</unlockOnStartup>

    <!-- 
      If true, IndexReaders will be reopened (often more efficient) instead
      of closed and then opened. 
     -->
    <reopenReaders>true</reopenReaders>

    <!--
      Expert:
      Controls how often Lucene loads terms into memory.  Default is 128 and is likely good for most everyone. 
    -->
    <!--<termIndexInterval>256</termIndexInterval>-->

    <!--
      Custom deletion policies can specified here. The class must
      implement org.apache.lucene.index.IndexDeletionPolicy.

      http://lucene.apache.org/java/2_3_2/api/org/apache/lucene/index/IndexDeletionPolicy.html

      The standard Solr IndexDeletionPolicy implementation supports deleting
      index commit points on number of commits, age of commit point and
      optimized status.

      The latest commit point should always be preserved regardless
      of the criteria.
    -->
    <deletionPolicy class="solr.SolrDeletionPolicy">
      <!-- The number of commit points to be kept -->
      <str name="maxCommitsToKeep">1</str>
      <!-- The number of optimized commit points to be kept -->
      <str name="maxOptimizedCommitsToKeep">0</str>
      <!--
        Delete all commit points once they have reached the given age.
        Supports DateMathParser syntax e.g.

        <str name="maxCommitAge">30MINUTES</str>
        <str name="maxCommitAge">1DAY</str>
      -->
    </deletionPolicy>

    <!-- 
      To aid in advanced debugging, you may turn on IndexWriter debug logging.
      Setting to true will set the file that the underlying Lucene IndexWriter
      will write its debug infostream to.  
    -->
    <infoStream file="INFOSTREAM.txt">false</infoStream>

  </mainIndex>

  <!--	
    Enables JMX if and only if an existing MBeanServer is found, use this
    if you want to configure JMX through JVM parameters. Remove this to disable
    exposing Solr configuration and statistics to JMX.

    If you want to connect to a particular server, specify the agentId
    e.g. <jmx agentId="myAgent" />

    If you want to start a new MBeanServer, specify the serviceUrl
    e.g <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr"/>

    For more details see http://wiki.apache.org/solr/SolrJmx
  -->
  <!--jmx /-->

  <!-- the default high-performance update handler -->
  <updateHandler class="solr.DirectUpdateHandler2">
    <!--
      A prefix of "solr." for class names is an alias that
      causes solr to search appropriate packages, including
      org.apache.solr.(search|update|request|core|analysis)
    -->

    <!-- 
      Perform a <commit/> automatically under certain conditions:
      maxDocs - number of updates since last commit is greater than this
      maxTime - oldest uncommited update (in ms) is this long ago
      Instead of enabling autoCommit, consider using "commitWithin"
      when adding documents. http://wiki.apache.org/solr/UpdateXmlMessages    
    -->

    <autoCommit>
      <maxDocs>500</maxDocs>
      <maxTime>30000</maxTime>
    </autoCommit>
  </updateHandler>

  <query>
    <!-- 
      Maximum number of clauses in a boolean query... in the past, this affected
      range or prefix queries that expanded to big boolean queries - built in Solr 
      query parsers no longer create queries with this limitation. 
      An exception is thrown if exceeded.  
    -->
    <maxBooleanClauses>1024</maxBooleanClauses>


    <!-- 
      There are two implementations of cache available for Solr,
      LRUCache, based on a synchronized LinkedHashMap, and
      FastLRUCache, based on a ConcurrentHashMap.  FastLRUCache has faster gets
      and slower puts in single threaded operation and thus is generally faster
      than LRUCache when the hit ratio of the cache is high (> 75%), and may be
      faster under other scenarios on multi-cpu systems. 
    -->
    <!-- 
      Cache used by SolrIndexSearcher for filters (DocSets),
      unordered sets of *all* documents that match a query.
      When a new searcher is opened, its caches may be prepopulated
      or "autowarmed" using data from caches in the old searcher.
      autowarmCount is the number of items to prepopulate.  For LRUCache,
      the autowarmed items will be the most recently accessed items.
      Parameters:
      class - the SolrCache implementation LRUCache or FastLRUCache
      size - the maximum number of entries in the cache
      initialSize - the initial capacity (number of entries) of
      the cache.  (seel java.util.HashMap)
      autowarmCount - the number of entries to prepopulate from
      and old cache.
    -->
    <filterCache
            class="solr.FastLRUCache"
            size="2048"
            initialSize="2048"
            autowarmCount="0"/>

    <!--
      queryResultCache caches results of searches - ordered lists of
      document ids (DocList) based on a query, a sort, and the range
      of documents requested.  
    -->
    <queryResultCache
            class="solr.LRUCache"
            size="1024"
            initialSize="1024"
            autowarmCount="0"/>

    <!-- 
      documentCache caches Lucene Document objects (the stored fields for each document).
      Since Lucene internal document ids are transient, this cache will not be autowarmed.  
    -->
    <documentCache
            class="solr.LRUCache"
            size="16384"
            initialSize="16384"
            autowarmCount="0"/>

    <!-- 
      If true, stored fields that are not requested will be loaded lazily.
      This can result in a significant speed improvement if the usual case is to
      not load all stored fields, especially if the skipped fields are large
      compressed text fields.
    -->
    <enableLazyFieldLoading>true</enableLazyFieldLoading>

    <!-- 
      An optimization that attempts to use a filter to satisfy a search.
      If the requested sort does not include score, then the filterCache
      will be checked for a filter matching the query. If found, the filter
      will be used as the source of document ids, and then the sort will be
      applied to that.
      <useFilterForSortedQuery>true</useFilterForSortedQuery>
    -->

    <!-- 
      An optimization for use with the queryResultCache.  When a search
      is requested, a superset of the requested number of document ids
      are collected.  For example, if a search for a particular query
      requests matching documents 10 through 19, and queryWindowSize is 50,
      then documents 0 through 49 will be collected and cached.  Any further
      requests in that range can be satisfied via the cache. 
     -->
    <queryResultWindowSize>20</queryResultWindowSize>

    <!-- 
      Maximum number of documents to cache for any entry in the
      queryResultCache. 
    -->
    <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

    <!-- 
      a newSearcher event is fired whenever a new searcher is being prepared
      and there is a current searcher handling requests (aka registered).
      It can be used to prime certain caches to prevent long request times for
      certain requests.
    -->
    <!-- 
      QuerySenderListener takes an array of NamedList and executes a
      local query request for each NamedList in sequence. 
    -->
    <listener event="newSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!--
          <lst> <str name="q">solr</str> <str name="start">0</str> <str name="rows">10</str> </lst>
          <lst> <str name="q">rocks</str> <str name="start">0</str> <str name="rows">10</str> </lst>
          <lst><str name="q">static newSearcher warming query from solrconfig.xml</str></lst>
        -->
      </arr>
    </listener>

    <!-- 
      a firstSearcher event is fired whenever a new searcher is being
      prepared but there is no current registered searcher to handle
      requests or to gain autowarming data from. 
    -->
    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <lst>
          <str name="q">author reproduct</str>
          <str name="start">0</str>
          <str name="rows">10</str>
        </lst>
        <lst>
          <str name="q">unrestrict research license access distribute</str>
          <str name="rows">0</str>
        </lst>
        <lst>
          <str name="q">genetixs water born diseasa</str>
          <str name="spellcheck.build">true</str>
          <str name="rows">0</str>
        </lst>
      </arr>
    </listener>

    <!-- If a search request comes in and there is no current registered searcher,
    then immediately register the still warming searcher and use it.  If
    "false" then all requests will block until the first searcher is done
    warming. -->
    <useColdSearcher>false</useColdSearcher>

    <!-- Maximum number of searchers that may be warming in the background
    concurrently.  An error is returned if this limit is exceeded. Recommend
    1-2 for read-only slaves, higher for masters w/o cache warming. -->
    <maxWarmingSearchers>2</maxWarmingSearchers>
  </query>

  <!-- 
  Let the dispatch filter handler /select?qt=XXX
  handleSelect=true will use consistent error handling for /select and /update
  handleSelect=false will use solr1.1 style error formatting
  -->
  <requestDispatcher handleSelect="true">
    <!--Make sure your system has some authentication before enabling remote streaming!  -->
    <requestParsers enableRemoteStreaming="true" multipartUploadLimitInKB="2048000"/>

    <!-- 
      Set HTTP caching related parameters (for proxy caches and clients).

      To get the behaviour of Solr 1.2 (ie: no caching related headers)
      use the never304="true" option and do not specify a value for
      <cacheControl>
    -->
    <!-- <httpCaching never304="true"> -->
    <httpCaching lastModifiedFrom="openTime" etagSeed="Solr">
      <!-- 
        lastModFrom="openTime" is the default, the Last-Modified value
        (and validation against If-Modified-Since requests) will all be
        relative to when the current Searcher was opened.
        You can change it to lastModFrom="dirLastMod" if you want the
        value to exactly corrispond to when the physical index was last
        modified.

        etagSeed="..." is an option you can change to force the ETag
        header (and validation against If-None-Match requests) to be
        differnet even if the index has not changed (ie: when making
        significant changes to your config file)

        lastModifiedFrom and etagSeed are both ignored if you use the
        never304="true" option.
      -->
      <!--
        If you include a <cacheControl> directive, it will be used to
        generate a Cache-Control header, as well as an Expires header
        if the value contains "max-age="

        By default, no Cache-Control header is generated.

        You can use the <cacheControl> option even if you have set
        never304="true"
      -->
      <!-- <cacheControl>max-age=30, public</cacheControl> -->
    </httpCaching>
  </requestDispatcher>

  <!-- 
    requestHandler plugins... incoming queries will be dispatched to the
    correct handler based on the path or the qt (query type) param.
    Names starting with a '/' are accessed with the a path equal to the 
    registered name.  Names without a leading '/' are accessed with:
    http://host/app/select?qt=name
    If no qt is defined, the requestHandler that declares default="true"
    will be used.
  -->
  <requestHandler name="standard" class="solr.SearchHandler" default="true">
    <!-- default values for query parameters -->
    <lst name="defaults">
      <str name="fl">id,score,title_display,publication_date,eissn,journal,article_type,author_display</str>
      <int name="rows">10</int>
      <str name="echoParams">none</str>

      <str name="hl">true</str>
      <str name="hl.fl">everything</str>
      <str name="hl.snippets">3</str>
      <str name="hl.fragsize">50</str>
      <str name="hl.maxAnalyzedChars">512000</str>
      <str name="hl.simple.pre">&lt;span class=&quot;highlight&quot;&gt;</str>
      <str name="hl.simple.post">&lt;/span&gt;</str>
      <str name="hl.usePhraseHighlighter">true</str>
      <str name="hl.highlightMultiTerm">true</str>
      <str name="hl.mergeContiguous">true</str>

      <!--Note, if we turn on moreLikeThis, we'll need to do some optimization -->
      <str name="mlt">false</str>
      <str name="mlt.fl">everything</str>

      <str name="spellcheck">false</str>
      <str name="spellcheck.onlyMorePopular">true</str>
      <str name="spellcheck.collate">true</str>
      <str name="spellcheck.extendedResults">false</str>
      <str name="spellcheck.count">5</str>
      <str name="facet">true</str>
      <str name="facet.method">enum</str>

      <!-- DisMAx configuration -->

      <!-- List of fields and optional boost factors -->
      <!-- For now, DisMax is set to query only one field, which behaves identical to Standard parser -->
      <str name="qf">title author everything</str>
      <!-- Minimum “Should” Match: specifies a minimum number of fields that must match in a query. -->
      <str name="mm">1&lt;75% 8&lt;60%</str>
      <!-- Phrase Fields: boosts the score of documents in cases where all of the terms
           in the q parameter appear in close proximity. -->
      <!--str name="pf">author^2</str-->
      <!-- Phrase Slop: specifies the number of positions two terms can be apart in
           order to match the specified phrase. -->
      <!--int name="ps"></int-->
      <!-- Tie Breaker: specifies a float value (which should be something much less
           than 1) to use as tiebreaker in DisMax queries. -->
      <!--float name="tie"></float-->
      <!-- Boost Query: specifies a raw query string (expressed in Solr query syntax) that will
           be included with the user's query to influence the score. -->
      <!--str name="bq"></str-->
      <!-- Boost Functions: specifies functions to be applied to boosts. -->
      <!--str name="bf"></str-->
      <!-- End of DisMax configuration -->
    </lst>

    <arr name="last-components">
      <str>spellcheck</str>
    </arr>
  </requestHandler>

  <!-- XSLT response writer transforms the XML output by any xslt file found
       in Solr's conf/xslt directory.  Changes to xslt files are checked for
       every xsltCacheLifetimeSeconds.  For development, this should be a lot lower
       http://wiki.apache.org/solr/XsltResponseWriter
   -->
  <queryResponseWriter name="xslt" class="org.apache.solr.request.XSLTResponseWriter">
    <int name="xsltCacheLifetimeSeconds">600</int>
  </queryResponseWriter>

  <!--
    Search components are registered to SolrCore and used by Search Handlers

    By default, the following components are avaliable:

    <searchComponent name="query"     class="org.apache.solr.handler.component.QueryComponent" />
    <searchComponent name="facet"     class="org.apache.solr.handler.component.FacetComponent" />
    <searchComponent name="mlt"       class="org.apache.solr.handler.component.MoreLikeThisComponent" />
    <searchComponent name="highlight" class="org.apache.solr.handler.component.HighlightComponent" />
    <searchComponent name="stats"     class="org.apache.solr.handler.component.StatsComponent" />
    <searchComponent name="debug"     class="org.apache.solr.handler.component.DebugComponent" />

    Default configuration in a requestHandler would look like:
    <arr name="components">
    <str>query</str>
    <str>facet</str>
    <str>mlt</str>
    <str>highlight</str>
    <str>stats</str>
    <str>debug</str>
    </arr>

    If you register a searchComponent to one of the standard names, that will be used instead.
    To insert components before or after the 'standard' components, use:

    <arr name="first-components">
    <str>myFirstComponentName</str>
    </arr>

    <arr name="last-components">
    <str>myLastComponentName</str>
    </arr>
  -->

  <!-- 
    The spell check component can return a list of alternative spelling
    suggestions.  
  -->
  <searchComponent name="spellcheck" class="solr.SpellCheckComponent">
    <str name="queryAnalyzerFieldType">text_noprocess</str>

    <lst name="spellchecker">
      <str name="name">default</str>
      <str name="buildOnCommit">true</str>
      <str name="classname">solr.IndexBasedSpellChecker</str>
      <str name="field">everything_noprocess</str>
      <str name="accuracy">0.5</str>
    </lst>
  </searchComponent>

  <queryConverter name="queryConverter" class="solr.SpellingQueryConverter"/>

  <!-- 
    A component to return terms and document frequency of those terms.
    This component does not yet support distributed search. 
  -->
  <searchComponent name="termsComponent" class="org.apache.solr.handler.component.TermsComponent"/>

  <requestHandler name="/terms" class="org.apache.solr.handler.component.SearchHandler">
    <lst name="defaults">
      <bool name="terms">true</bool>
    </lst>
    <arr name="components">
      <str>termsComponent</str>
    </arr>
  </requestHandler>

  <!-- 
    Update request handler.  

    Note: Since solr1.1 requestHandlers requires a valid content type header if posted in
    the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'
    The response format differs from solr1.1 formatting and returns a standard error code.
    To enable solr1.1 behavior, remove the /update handler or change its path
  -->
  <requestHandler name="/update" class="solr.XmlUpdateRequestHandler"/>

  <!--
    An analysis handler that provides a breakdown of the analysis process of provided docuemnts. This handler expects a
    (single) content stream with the following format:

    <docs>
    <doc>
    <field name="id">1</field>
    <field name="name">The Name</field>
    <field name="text">The Text Value</field>
    <doc>
    <doc>...</doc>
    <doc>...</doc>
    ...
    </docs>

    Note: Each document must contain a field which serves as the unique key. This key is used in the returned
    response to assoicate an analysis breakdown to the analyzed document.

    Like the FieldAnalysisRequestHandler, this handler also supports query analysis by
    sending either an "analysis.query" or "q" request paraemter that holds the query text to be analyized. It also
    supports the "analysis.showmatch" parameter which when set to true, all field tokens that match the query
    tokens will be marked as a "match".
  -->
  <requestHandler name="/analysis/document" class="solr.DocumentAnalysisRequestHandler"/>

  <!--
    RequestHandler that provides much the same functionality as analysis.jsp. Provides the ability
    to specify multiple field types and field names in the same request and outputs index-time and
    query-time analysis for each of them.

    Request parameters are:
    analysis.fieldname - The field name whose analyzers are to be used
    analysis.fieldtype - The field type whose analyzers are to be used
    analysis.fieldvalue - The text for index-time analysis
    q (or analysis.q) - The text for query time analysis
    analysis.showmatch (true|false) - When set to true and when query analysis is performed, the produced
                  tokens of the field value analysis will be marked as "matched" for every
                  token that is produces by the query analysis
  -->
  <requestHandler name="/analysis/field" class="solr.FieldAnalysisRequestHandler"/>

  <!-- 
    Admin Handlers - This will register all the standard admin RequestHandlers.  Adding 
    this single handler is equivalent to registering:

    <requestHandler name="/admin/luke"       class="org.apache.solr.handler.admin.LukeRequestHandler" />
    <requestHandler name="/admin/system"     class="org.apache.solr.handler.admin.SystemInfoHandler" />
    <requestHandler name="/admin/plugins"    class="org.apache.solr.handler.admin.PluginInfoHandler" />
    <requestHandler name="/admin/threads"    class="org.apache.solr.handler.admin.ThreadDumpHandler" />
    <requestHandler name="/admin/properties" class="org.apache.solr.handler.admin.PropertiesRequestHandler" />
    <requestHandler name="/admin/file"       class="org.apache.solr.handler.admin.ShowFileRequestHandler" >

    If you wish to hide files under ${solr.home}/conf, explicitly register the ShowFileRequestHandler using:
    <requestHandler name="/admin/file" class="org.apache.solr.handler.admin.ShowFileRequestHandler" >
    <lst name="invariants">
    <str name="hidden">synonyms.txt</str> 
    <str name="hidden">anotherfile.txt</str> 
    </lst>
    </requestHandler>
  -->
  <requestHandler name="/admin/" class="org.apache.solr.handler.admin.AdminHandlers"/>

  <!-- ping/healthcheck -->
  <requestHandler name="/admin/ping" class="PingRequestHandler">
    <lst name="defaults">
      <str name="qt">standard</str>
      <str name="q">solrpingquery</str>
      <str name="echoParams">all</str>
    </lst>
  </requestHandler>

  <!-- Echo the request contents back to the client -->
  <requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <!-- for all params (including the default etc) use: 'all' -->
      <str name="echoHandler">true</str>
    </lst>
  </requestHandler>

  <highlighting>
    <!-- Configure the standard fragmenter -->
    <!-- This could most likely be commented out in the "default" case -->
    <fragmenter name="gap" class="org.apache.solr.highlight.GapFragmenter" default="true">
      <lst name="defaults">
        <int name="hl.fragsize">100</int>
      </lst>
    </fragmenter>

    <!-- A regular-expression-based fragmenter (f.i., for sentence extraction) -->
    <fragmenter name="regex" class="org.apache.solr.highlight.RegexFragmenter">
      <lst name="defaults">
        <!-- slightly smaller fragsizes work better because of slop -->
        <int name="hl.fragsize">70</int>
        <!-- allow 50% slop on fragment sizes -->
        <float name="hl.regex.slop">0.5</float>
        <!-- a basic sentence pattern -->
        <str name="hl.regex.pattern">[-\w ,/\n\"']{20,200}</str>
      </lst>
    </fragmenter>

    <!-- Configure the standard formatter -->
    <formatter name="html" class="org.apache.solr.highlight.HtmlFormatter" default="true">
      <lst name="defaults">
        <str name="hl.simple.pre"><![CDATA[<em>]]></str>
        <str name="hl.simple.post"><![CDATA[</em>]]></str>
      </lst>
    </formatter>
  </highlighting>

  <!-- config for the admin interface -->
  <admin>
    <defaultQuery>genetics</defaultQuery>

    <!-- configure a healthcheck file for servers behind a loadbalancer
    <healthcheck type="file">server-enabled</healthcheck>
    -->
  </admin>
</config>
